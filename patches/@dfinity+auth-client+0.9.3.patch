diff --git a/node_modules/@dfinity/auth-client/lib/cjs/index.d.ts b/node_modules/@dfinity/auth-client/lib/cjs/index.d.ts
index 1b54a5c..40a69be 100644
--- a/node_modules/@dfinity/auth-client/lib/cjs/index.d.ts
+++ b/node_modules/@dfinity/auth-client/lib/cjs/index.d.ts
@@ -12,6 +12,10 @@ export interface AuthClientCreateOptions {
      * Optional storage with get, set, and remove. Uses LocalStorage by default
      */
     storage?: AuthClientStorage;
+	/**
+     * Optional window object with open, addEventListener, removeEventListener, history.pushState, location.href. Uses window by default
+     */
+    windowObj?: any;
 }
 export interface AuthClientLoginOptions {
     /**
@@ -39,6 +43,7 @@ export interface AuthClientStorage {
     set(key: string, value: string): Promise<void>;
     remove(key: string): Promise<void>;
 }
+
 export declare class LocalStorage implements AuthClientStorage {
     readonly prefix: string;
     private readonly _localStorage?;
@@ -53,10 +58,11 @@ export declare class AuthClient {
     private _key;
     private _chain;
     private _storage;
+	private _window;
     private _idpWindow?;
     private _eventHandler?;
     static create(options?: AuthClientCreateOptions): Promise<AuthClient>;
-    protected constructor(_identity: Identity, _key: SignIdentity | null, _chain: DelegationChain | null, _storage: AuthClientStorage, _idpWindow?: Window | undefined, _eventHandler?: ((event: MessageEvent) => void) | undefined);
+    protected constructor(_identity: Identity, _key: SignIdentity | null, _chain: DelegationChain | null, _storage: AuthClientStorage, _window:any, _idpWindow?: Window | undefined, _eventHandler?: ((event: MessageEvent) => void) | undefined);
     private _handleSuccess;
     getIdentity(): Identity;
     isAuthenticated(): Promise<boolean>;
diff --git a/node_modules/@dfinity/auth-client/lib/cjs/index.js b/node_modules/@dfinity/auth-client/lib/cjs/index.js
index 6f1e0d3..85844d8 100644
--- a/node_modules/@dfinity/auth-client/lib/cjs/index.js
+++ b/node_modules/@dfinity/auth-client/lib/cjs/index.js
@@ -1,4 +1,13 @@
 "use strict";
+if (!global.localStorage) {
+  global.localStorage = {
+    _data       : {},
+    setItem     : function(id, val) { return this._data[id] = String(val); },
+    getItem     : function(id) { return this._data.hasOwnProperty(id) ? this._data[id] : undefined; },
+    removeItem  : function(id) { return delete this._data[id]; },
+    clear       : function() { return this._data = {}; }
+  };
+}
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.AuthClient = exports.LocalStorage = void 0;
 const agent_1 = require("@dfinity/agent");
@@ -48,7 +57,7 @@ class LocalStorage {
 }
 exports.LocalStorage = LocalStorage;
 class AuthClient {
-    constructor(_identity, _key, _chain, _storage, 
+    constructor(_identity, _key, _chain, _storage, _window,
     // A handle on the IdP window.
     _idpWindow, 
     // The event handler for processing events from the IdP.
@@ -59,10 +68,12 @@ class AuthClient {
         this._storage = _storage;
         this._idpWindow = _idpWindow;
         this._eventHandler = _eventHandler;
+		this._window = _window;
     }
     static async create(options = {}) {
         var _a;
         const storage = (_a = options.storage) !== null && _a !== void 0 ? _a : new LocalStorage('ic-');
+		const windowObj = (_a = options.windowObj) !== null && _a !== void 0 ? _a : window;
         let key = null;
         if (options.identity) {
             key = options.identity;
@@ -103,7 +114,7 @@ class AuthClient {
                 key = null;
             }
         }
-        return new this(identity, key, chain, storage);
+        return new this(identity, key, chain, storage, windowObj);
     }
     _handleSuccess(message, onSuccess) {
         var _a;
@@ -139,22 +150,28 @@ class AuthClient {
             this._key = key;
             await this._storage.set(KEY_LOCALSTORAGE_KEY, JSON.stringify(key));
         }
+		
         // Create the URL of the IDP. (e.g. https://XXXX/#authorize)
         const identityProviderUrl = new URL(((_a = options === null || options === void 0 ? void 0 : options.identityProvider) === null || _a === void 0 ? void 0 : _a.toString()) || IDENTITY_PROVIDER_DEFAULT);
-        // Set the correct hash if it isn't already set.
-        identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;
+		
+		if(typeof identityProviderUrl !== 'string'){
+			// Set the correct hash if it isn't already set.
+			////identityProviderUrl.hash = IDENTITY_PROVIDER_ENDPOINT;
+		}
+		
         // If `login` has been called previously, then close/remove any previous windows
         // and event listeners.
         (_b = this._idpWindow) === null || _b === void 0 ? void 0 : _b.close();
         this._removeEventListener();
         // Add an event listener to handle responses.
         this._eventHandler = this._getEventHandler(identityProviderUrl, options);
-        window.addEventListener('message', this._eventHandler);
+        this._window.addEventListener('message', this._eventHandler);
         // Open a new window with the IDP provider.
-        this._idpWindow = (_c = window.open(identityProviderUrl.toString(), 'idpWindow')) !== null && _c !== void 0 ? _c : undefined;
+        this._idpWindow = (_c = this._window.open(identityProviderUrl.toString(), 'idpWindow')) !== null && _c !== void 0 ? _c : undefined;
     }
     _getEventHandler(identityProviderUrl, options) {
         return async (event) => {
+			console.log(event);
             var _a, _b;
             if (event.origin !== identityProviderUrl.origin) {
                 return;
@@ -202,7 +219,7 @@ class AuthClient {
     }
     _removeEventListener() {
         if (this._eventHandler) {
-            window.removeEventListener('message', this._eventHandler);
+            this._window.removeEventListener('message', this._eventHandler);
         }
         this._eventHandler = undefined;
     }
@@ -214,10 +231,10 @@ class AuthClient {
         this._chain = null;
         if (options.returnTo) {
             try {
-                window.history.pushState({}, '', options.returnTo);
+                this._window.history.pushState({}, '', options.returnTo);
             }
             catch (e) {
-                window.location.href = options.returnTo;
+                this._window.location.href = options.returnTo;
             }
         }
     }
