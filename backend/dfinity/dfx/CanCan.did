type ViralVideoSuperLiker = 
 record {
   time: int;
   user: UserId_2;
 };
type ViralVideo = 
 record {
   superLikers: vec ViralVideoSuperLiker;
   uploader: UserId_2;
   video: VideoId_2;
 };
type VideosPred = 
 variant {
   containsAll: vec VideoId_3;
   equals: vec VideoId_3;
 };
type VideoResults_2 = vec VideoResult;
type VideoResults = VideoResults_2;
type VideoResult = 
 record {
   VideoInfo_2;
   opt VideoPic_2;
 };
type VideoPic_2 = vec nat8;
type VideoPic = VideoPic_2;
type VideoInit_2 = 
 record {
   caption: text;
   chunkCount: nat;
   createdAt: Timestamp;
   externalId: text;
   name: text;
   tags: vec text;
   userId: UserId_2;
 };
type VideoInit = VideoInit_2;
type VideoInfo_2 = 
 record {
   abuseFlagCount: nat;
   caption: text;
   chunkCount: nat;
   createdAt: Timestamp;
   externalId: text;
   likes: vec UserId_2;
   name: text;
   pic: opt VideoPic_2;
   sharedCount: nat;
   superLikes: vec UserId_2;
   tags: vec text;
   uploadedAt: Timestamp;
   userId: UserId_2;
   videoId: VideoId_2;
   viewCount: nat;
   viewerHasFlagged: opt bool;
   viralAt: opt Timestamp;
 };
type VideoInfo = VideoInfo_2;
type VideoId_3 = VideoId_2;
type VideoId_2 = text;
type VideoId = VideoId_2;
type Video = 
 record {
   caption: text;
   chunkCount: nat;
   createdAt: Timestamp;
   externalId: text;
   name: text;
   tags: vec text;
   uploadedAt: Timestamp;
   userId: UserId_2;
   viewCount: nat;
   viralAt: opt Timestamp;
 };
type UserId_3 = UserId_2;
type UserId_2 = text;
type UserId = UserId_2;
type UserAllowances = 
 record {
   abuseFlags: AllowanceBalance;
   superLikes: AllowanceBalance;
 };
type UserAction = 
 variant {
   admin;
   create;
   update;
   view;
 };
type Trie_9 = 
 variant {
   branch: Branch_9;
   "empty";
   leaf: Leaf_9;
 };
type Trie_8 = 
 variant {
   branch: Branch_8;
   "empty";
   leaf: Leaf_8;
 };
type Trie_7 = 
 variant {
   branch: Branch_7;
   "empty";
   leaf: Leaf_7;
 };
type Trie_6 = 
 variant {
   branch: Branch_6;
   "empty";
   leaf: Leaf_6;
 };
type Trie_5 = 
 variant {
   branch: Branch_5;
   "empty";
   leaf: Leaf_5;
 };
type Trie_4 = 
 variant {
   branch: Branch_4;
   "empty";
   leaf: Leaf_4;
 };
type Trie_3 = 
 variant {
   branch: Branch_3;
   "empty";
   leaf: Leaf_3;
 };
type Trie_2 = 
 variant {
   branch: Branch_2;
   "empty";
   leaf: Leaf_2;
 };
type Trie2D_2 = Trie_4;
type Trie2D = Trie_2;
type Trie = 
 variant {
   branch: Branch;
   "empty";
   leaf: Leaf;
 };
type TraceCommand = 
 record {
   command: Command;
   result: Result;
 };
type Trace = 
 record {
   status: variant {
             err;
             ok;
           };
   trace: vec TraceCommand;
 };
type Timestamp = int;
type TimeMode = 
 variant {
   ic;
   script: int;
 };
type SuperLikeVideoFail = 
 record {
   source: UserId_2;
   target: VideoId_2;
 };
type SuperLikeVideo = 
 record {
   source: UserId_2;
   superLikes: bool;
   target: VideoId_2;
 };
type StateShared = 
 record {
   chunks: MapShared;
   follows: RelShared;
   likes: RelShared_3;
   profiles: MapShared_2;
   rewards: MapShared_3;
   uploaded: RelShared_3;
   users: MapShared_4;
   videos: MapShared_5;
 };
type Signal = variant {viralVideo: ViralVideo;};
type ShareVideo = 
 record {
   isShared: bool;
   receiver: UserId_2;
   target: VideoId_2;
 };
type RewardPointTransfer = 
 record {
   amount: nat;
   receiver: UserId_2;
   sender: UserId_2;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type RelShared_4 = record {forw: Trie2D_2;};
type RelShared_3 = RelShared_4;
type RelShared_2 = record {forw: Trie2D;};
type RelShared = RelShared_2;
type ProfilePic_2 = vec nat8;
type ProfilePic = ProfilePic_2;
type ProfileInfo_2 = 
 record {
   abuseFlagCount: nat;
   followers: vec UserId_2;
   following: vec UserId_2;
   hasPic: bool;
   likedVideos: vec VideoId_2;
   rewards: nat;
   uploadedVideos: vec VideoId_2;
   userName: text;
 };
type ProfileInfoPlus_2 = 
 record {
   abuseFlagCount: nat;
   allowances: opt UserAllowances;
   followers: vec ProfileInfo_2;
   following: vec ProfileInfo_2;
   hasPic: bool;
   likedVideos: vec VideoInfo_2;
   rewards: nat;
   uploadedVideos: vec VideoInfo_2;
   userName: text;
   viewerHasFlagged: opt bool;
 };
type ProfileInfoPlus = ProfileInfoPlus_2;
type ProfileInfo = ProfileInfo_2;
type Profile = 
 record {
   createdAt: Timestamp;
   userName: text;
 };
type Message = 
 record {
   event: Event;
   id: nat;
   time: Timestamp;
 };
type MapShared_5 = Trie_9;
type MapShared_4 = Trie_8;
type MapShared_3 = Trie_7;
type MapShared_2 = Trie_6;
type MapShared = Trie;
type List_9 = 
 opt record {
       record {
         Key_3;
         Video;
       };
       List_9;
     };
type List_8 = 
 opt record {
       record {
         Key_4;
         UserId_2;
       };
       List_8;
     };
type List_7 = 
 opt record {
       record {
         Key_2;
         nat;
       };
       List_7;
     };
type List_6 = 
 opt record {
       record {
         Key_2;
         Profile;
       };
       List_6;
     };
type List_5 = 
 opt record {
       record {
         Key_3;
         null;
       };
       List_5;
     };
type List_4 = 
 opt record {
       record {
         Key_2;
         Trie_5;
       };
       List_4;
     };
type List_3 = 
 opt record {
       record {
         Key_2;
         null;
       };
       List_3;
     };
type List_2 = 
 opt record {
       record {
         Key_2;
         Trie_3;
       };
       List_2;
     };
type List = 
 opt record {
       record {
         Key;
         ChunkData;
       };
       List;
     };
type LikeVideo = 
 record {
   likes: bool;
   source: UserId_2;
   target: VideoId_2;
 };
type Leaf_9 = 
 record {
   keyvals: AssocList_17;
   size: nat;
 };
type Leaf_8 = 
 record {
   keyvals: AssocList_15;
   size: nat;
 };
type Leaf_7 = 
 record {
   keyvals: AssocList_13;
   size: nat;
 };
type Leaf_6 = 
 record {
   keyvals: AssocList_11;
   size: nat;
 };
type Leaf_5 = 
 record {
   keyvals: AssocList_9;
   size: nat;
 };
type Leaf_4 = 
 record {
   keyvals: AssocList_7;
   size: nat;
 };
type Leaf_3 = 
 record {
   keyvals: AssocList_5;
   size: nat;
 };
type Leaf_2 = 
 record {
   keyvals: AssocList_3;
   size: nat;
 };
type Leaf = 
 record {
   keyvals: AssocList;
   size: nat;
 };
type Key_4 = 
 record {
   hash: Hash;
   key: principal;
 };
type Key_3 = 
 record {
   hash: Hash;
   key: VideoId_2;
 };
type Key_2 = 
 record {
   hash: Hash;
   key: UserId_2;
 };
type Key = 
 record {
   hash: Hash;
   key: ChunkId;
 };
type Hash = nat32;
type Event_3 = 
 record {
   check: Check;
   isOk: bool;
   time: int;
 };
type Event_2 = 
 record {
   id: nat;
   kind: EventKind;
   time: int;
 };
type EventKind = 
 variant {
   abuseFlag: AbuseFlag;
   createProfile: CreateProfile;
   createVideo: CreateVideo;
   emitSignal: Signal;
   likeVideo: LikeVideo;
   reset: TimeMode;
   rewardPointTransfer: RewardPointTransfer;
   shareVideo: ShareVideo;
   superLikeVideo: SuperLikeVideo;
   superLikeVideoFail: SuperLikeVideoFail;
 };
type Event = 
 variant {
   superlikerReward: record {
                       rewards: nat;
                       videoId: VideoId_2;
                     };
   transferReward: record {rewards: nat;};
   uploadReward: record {
                   rewards: nat;
                   videoId: VideoId_2;
                 };
 };
type CreateVideo = record {info: VideoInit_2;};
type CreateProfile = 
 record {
   pic: opt ProfilePic_2;
   userName: text;
 };
type Command = 
 variant {
   assertVideoFeed:
    record {
      limit: opt nat;
      userId: UserId_3;
      videosPred: VideosPred;
    };
   assertVideoVirality: record {
                          isViral: bool;
                          videoId: VideoId_3;
                        };
   createTestData:
    record {
      users: vec UserId_3;
      videos: vec record {
                    UserId_3;
                    VideoId_3;
                  };
    };
   putProfileFollow:
    record {
      follows: bool;
      toFollow: UserId_3;
      userId: UserId_3;
    };
   putRewardTransfer:
    record {
      amount: nat;
      receiver: UserId_3;
      sender: UserId_3;
    };
   putSuperLike:
    record {
      superLikes: bool;
      userId: UserId_3;
      videoId: VideoId_3;
    };
   reset: TimeMode;
 };
type ChunkId = text;
type ChunkData_2 = vec nat8;
type ChunkData = ChunkData_2;
type Check = 
 record {
   actionTarget: ActionTarget;
   caller: principal;
   userAction: UserAction;
 };
type CanCan = 
 service {
   checkUsernameAvailable: (text) -> (bool) query;
   createProfile: (text, opt ProfilePic) -> (opt ProfileInfoPlus);
   createTestData: (vec UserId, vec record {
                                      UserId;
                                      VideoId;
                                    }) -> (opt null);
   createVideo: (VideoInit) -> (opt VideoId);
   doDemo: (vec Command) -> (opt Trace);
   getAccessLog: () -> (opt vec Event_3) query;
   getAllUserVideos: (UserId, opt nat) -> (opt VideoResults) query;
   getEventLog: () -> (opt vec Event_2) query;
   getFeedVideos: (UserId, opt nat) -> (opt VideoResults) query;
   getIsSuperLiker: (UserId, VideoId) -> (opt bool) query;
   getMessages: (UserId) -> (opt vec Message) query;
   getProfileInfo: (UserId) -> (opt ProfileInfo) query;
   getProfilePic: (UserId) -> (opt ProfilePic) query;
   getProfilePlus: (opt UserId, UserId) -> (opt ProfileInfoPlus) query;
   getProfileVideos: (UserId, opt nat) -> (opt VideoResults) query;
   getProfiles: () -> (opt vec ProfileInfo) query;
   getSearchVideos: (UserId, vec text, opt nat) -> (opt VideoResults) query;
   getState: () -> (StateShared) query;
   getSuperLikeValidNow: (UserId, VideoId) -> (opt bool) query;
   getUserNameByPrincipal: (principal) -> (opt vec text);
   getVideoChunk: (VideoId, nat) -> (opt vec nat8) query;
   getVideoInfo: (opt UserId, VideoId) -> (opt VideoInfo) query;
   getVideoPic: (VideoId) -> (opt VideoPic) query;
   getVideos: () -> (opt vec VideoInfo) query;
   isDropDay: () -> (opt bool) query;
   putAbuseFlagUser: (UserId, UserId, bool) -> (opt null);
   putAbuseFlagVideo: (UserId, VideoId, bool) -> (opt null);
   putProfileFollow: (UserId, UserId, bool) -> (opt null);
   putProfilePic: (UserId, opt ProfilePic) -> (opt null);
   putProfileVideoLike: (UserId, VideoId, bool) -> (opt null);
   putRewardTransfer: (UserId, UserId, nat) -> (opt null);
   putRewards: (UserId, nat) -> (opt null);
   putSuperLike: (UserId, VideoId, bool) -> (opt null);
   putTestFollows: (vec record {
                          UserId;
                          UserId;
                        }) -> (opt null);
   putVideoChunk: (VideoId, nat, vec nat8) -> (opt null);
   putVideoInfo: (VideoId, VideoInit) -> (opt null);
   putVideoPic: (VideoId, opt VideoPic) -> (opt null);
   reset: (variant {
             ic;
             script: int;
           }) -> (opt null);
   scriptTimeTick: () -> (opt null);
   setTimeMode: (variant {
                   ic;
                   script: int;
                 }) -> (opt null);
   shareVideo: (UserId, text, bool) -> (opt text);
   testGetUserNameByPrincipal: (opt principal) -> ();
 };
type Branch_9 = 
 record {
   left: Trie_9;
   right: Trie_9;
   size: nat;
 };
type Branch_8 = 
 record {
   left: Trie_8;
   right: Trie_8;
   size: nat;
 };
type Branch_7 = 
 record {
   left: Trie_7;
   right: Trie_7;
   size: nat;
 };
type Branch_6 = 
 record {
   left: Trie_6;
   right: Trie_6;
   size: nat;
 };
type Branch_5 = 
 record {
   left: Trie_5;
   right: Trie_5;
   size: nat;
 };
type Branch_4 = 
 record {
   left: Trie_4;
   right: Trie_4;
   size: nat;
 };
type Branch_3 = 
 record {
   left: Trie_3;
   right: Trie_3;
   size: nat;
 };
type Branch_2 = 
 record {
   left: Trie_2;
   right: Trie_2;
   size: nat;
 };
type Branch = 
 record {
   left: Trie;
   right: Trie;
   size: nat;
 };
type AssocList_9 = AssocList_10;
type AssocList_8 = List_4;
type AssocList_7 = AssocList_8;
type AssocList_6 = List_3;
type AssocList_5 = AssocList_6;
type AssocList_4 = List_2;
type AssocList_3 = AssocList_4;
type AssocList_2 = List;
type AssocList_18 = List_9;
type AssocList_17 = AssocList_18;
type AssocList_16 = List_8;
type AssocList_15 = AssocList_16;
type AssocList_14 = List_7;
type AssocList_13 = AssocList_14;
type AssocList_12 = List_6;
type AssocList_11 = AssocList_12;
type AssocList_10 = List_5;
type AssocList = AssocList_2;
type AllowanceBalance = 
 variant {
   nonZero: nat;
   zeroForever;
   zeroUntil: Timestamp;
 };
type ActionTarget = 
 variant {
   all;
   pubView;
   user: UserId_2;
   video: VideoId_2;
 };
type AbuseFlag = 
 record {
   flag: bool;
   reporter: UserId_2;
   target: variant {
             user: UserId_2;
             video: VideoId_2;
           };
 };
service : () -> CanCan
